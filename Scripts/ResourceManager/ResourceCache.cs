//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using BlGame;
using UnityEngine;
using System.Collections.Generic;
using BlGame.GameEntity;
using GameDefine;
using BlGame.Effect;
namespace BlGame.Resource
{

	public class ResourceCache:UnitySingleton<ResourceCache>
	{

		private Dictionary<string,UnityEngine.Object> mObjectPool = new Dictionary<string,UnityEngine.Object>();
//		public ResourceCache ()
//		{
//
//		}
		/// <summary>
		/// ry to preload all resources by hero type string
		/// </summary>
		/// <param name="filePath">File path.</param>
		public void preLoadResources(string filePath){
			this.preLoadResources(new List<string>(){filePath});
		}
		/// <summary>
		/// ry to preload all resources by hero type string List
		/// </summary>
		/// <param name="filePath">File path.</param>
		public void preLoadResources(List<string> filePath){
			foreach (string path in filePath) {
				this.getResource(path);
			}
		}
		/// <summary>
		/// try to preload all resources by hero type Id
		/// -ObjTypeID
		/// -ModelName
		/// 
		/// </summary>
		/// <param name="heroType">Hero type.</param>
		public void preLoadResources(int heroType){
			this.preLoadResources (new List<int> (){heroType});
		}
		/// <summary>
		/// try to preload all resources by hero type Id List
		/// -ObjTypeID
		/// -ModelName
		/// 
		/// </summary>
		/// <param name="heroType">Hero type.</param>
		public void preLoadResources(List<int> heroList){
			foreach (int heroType in heroList) {
				this.tryCacehAllObject(heroType);
			}
		}
		private void tryCacehAllObject(int objTypeId){
			string ModelName = EntityManager.Instance.CacheGetModeName (objTypeId);
			string path = GameDefine.GameConstDefine.LoadMonsterModels;

			HeroConfigInfo hcfg = ConfigReader.GetHeroInfo (objTypeId);
			int skill1=0,skill2=0,skill3=0,skill4 = 0;
			if (hcfg != null) {
				skill1 = hcfg.HeroSkillType1;
				skill2 = hcfg.HeroSkillType2;
				skill3 = hcfg.HeroSkillType3;//1's prower skill
				skill4 = hcfg.HeroSkillType4;
			}

			//所有技能(GetPrepareSkill, 也可能是物品skill)
			string resourcePath ;
			GameObject obj;
			if (skill1 != 0) {
				//SkillConfigInfo info = ConfigReader.GetSkillInfo(skill1); 
				SkillManagerConfig info = ConfigReader.GetSkillManagerCfg(skill1);

				SkillConfigInfo skillInfo = ConfigReader.GetSkillInfo((uint)skill1);
				resourcePath = GameConstDefine.LoadGameBuffEffectPath + info.EventID;

				SkillAreaConfig skillConfig = ConfigReader.GetSkillAreaConfig((uint)skill1);
				//判断路径是否有效
				if (skillConfig != null && skillConfig.effect != "0")
				{
					resourcePath = GameConstDefine.LoadGameSkillEffectPath + "release/" + skillConfig.effect;
					obj = GameObjectPool.Instance.GetGO(resourcePath);
					//return null;
				}

				string buffPath = EffectManager.Instance.GetBuffEffectPath((uint)skill1);
				//eventid可能等于0
				string flyPath = EffectManager.Instance.getFlyEffectPath(info.EventID);//131010
				obj = GameObjectPool.Instance.GetGO(flyPath);

				//string templateName = ResourceCommon.getResourceName(resourcePath);
				       

			}

			//创建GameObject    
			string resPath = ModelName;
			//GameObject realObject = GameObjectPool.Instance.GetGO(resPath);
			//以下资源根据客户端cfg获得，所以也是存在和服务器返回有出入的可能性
			//所有状态	


		}
		/// <summary>
		/// Try to get Resource from a cache pool first
		/// </summary>
		/// <returns>The resource.</returns>
		/// <param name="filePathName">File path name.</param>
		public UnityEngine.Object getResource(string filePathName){

			if (mObjectPool.ContainsKey (filePathName)) {
				UnityEngine.Object asset = mObjectPool[filePathName];
				return asset;
			} else {
				UnityEngine.Object asset = Resources.Load(filePathName);
				mObjectPool.Add(filePathName,asset);
				return asset;
			}



		}
	}


}

